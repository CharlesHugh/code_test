C51 COMPILER V6.23a  3                                                                     09/29/2015 00:28:02 PAGE 1   


C51 COMPILER V6.23a, COMPILATION OF MODULE 3
OBJECT MODULE PLACED IN \\PSF\HOME\DOCU~CQ0\MY-TEST\3.OBJ
COMPILER INVOKED BY: C:\COMP51\C51.EXE \\PSF\HOME\DOCU~CQ0\MY-TEST\3.C DB SB OE

stmt level    source

   1          
   2          //--------------------------------------------------------------------------//
   3          //                                源程序大公开                              //
   4          //                    (c) Copyright 2001－2002 xuwenjun                     //
   5          //                            All Rights Reserved                           //
   6          //                                    V1.00                                 //
   7          //--------------------------------------------------------------------------//
   8          //标　题: 单片机IO口播放乐曲                                                //
   9          //版　本: V1.00                                                             //
  10          //文件名: xwj_lcd16.C                                                       //
  11          //创建人: 徐文军                         E-mail:xuwenjun@21cn.com           //
  12          //日　期: 02-11-5                                                           //
  13          //描　述: 单片机利用T1中断在IO口P1.0输出乐曲                                //
  14          //声　明:                                                                   //
  15          //        以下代码仅免费提供给学习用途，但引用或修改后必须在文件中声明出处. //
  16          //        如用于商业用途请与作者联系.    E-mail:xuwenjun@21cn.com           //
  17          //        有问题请mailto xuwenjun@21cn.com   欢迎与我交流!                  //
  18          //--------------------------------------------------------------------------//
  19          //修改人: 徐文军                         E-mail:xuwenjun@21cn.com           //
  20          //日　期: 02-11-5                                                           //
  21          //说　明:                                                                   //
  22          //        单片机用T1中断在IO口P1.0输出乐曲(在P1.0口与VCC间接一喇叭即可听到) //
  23          //        1.由于输出的是方波，比较难听:-)你也可以将波形细分用DA输出正弦波   //
  24          //        2.由于T1频繁中断，任何其他中断发生都会是乐曲打顿，只适合试验      //
  25          //        3.优化音符编码：一个字节中包含节拍、音符、升降调，可区分数据和命令//
  26          //                        同时人工将音符译为机器码非常容易。(格式看下面实例)//
  27          //--------------------------------------------------------------------------//
  28          #include <reg52.h>
  29          #include <intrins.h>
  30          #define  FREQ 11059200
  31          
  32              //  音乐_编码2 -- 存储器定义  //
  33          unsigned char code music_tab1[]={    //音符码格式:| D7 |D6  D5  D4| D3 |D2D1  D0|
  34                                               //梁祝       |变调|      节拍|升降|     音符 |
  35              0xcb,                            //示例:0xcb=11001011B,即升调,4/16拍,3Mi低音
  36              0x35,0x16,0xb9,0x12,0x96,0x99,0xa5,
  37              0xbd,0x99,0x96,0x15,0x13,0x15,0x62,
  38              0x32,0x13,0xa7,0x26,0x25,0x16,0xa9,0x22,
  39              0xa3,0xa9,0x96,0x15,0x16,0x99,0xe5,
  40              0xbb,0x15,0xa7,0xaa,0x96,0x99,0xd5,
  41              0x13,0x15,0x23,0x15,0x16,0x17,0x9a,0xd6,0x15,0x16,
  42              0xb9,0x12,0x25,0x23,0x23,0x22,0x13,0x12,0x21,0x96,0x15,
  43              0x43,0xc9,0x96,0x99,0x96,0x15,0x13,0x15,0x16,0x99,
  44              0xd5,                            //功能码格式:| D7  D6  D5  D4  | D3  D2D1  D0|
  45                                               //           |高4位=0时是功能码|根据低4位散转  |
  46              0x00,                            //最后字节为功能码必须==0x00退出
  47          };
  48          unsigned char code music_tab2[]={    //康定情歌
  49              0x23,0x25,0x26,0x16,0x15,    0x36,0x13,0x42,
  50              0x23,0x25,0x26,0x16,0x15,    0x26,0x53,
  51              0x23,0x25,0x26,0x16,0x15,    0x26,0x23,0x42,
  52              0x25,0x23,0x12,0x13,0x12,0x11,    0x22,0xd6,
  53              0x26,0xda,    0x25,0x53,    0x12,0x11,0xd6,
  54              0xad,0x23,0x12,0x13,0x12,0x11,    0x22,0xd6,
  55              0x00,
C51 COMPILER V6.23a  3                                                                     09/29/2015 00:28:02 PAGE 2   

  56          };
  57          unsigned char code music_tab3[]={    //美酒加咖啡
  58              0x55,0x23,0x25,0x26,0xa9,0x22,    0x73,
  59              0x45,0x25,0x26,0x23,0x22,0x21,0x23,    0x72,
  60              0x52,0x23,0x45,0x43,    0x22,0x21,0xa6,0x25,0x66,
  61              0xc9,0xa6,0x25,0x23,0x25,0x26,0xa9,    0xf5,
  62              0x45,0x23,0x25,0x46,0xc9,    0x22,0x13,0x12,0x21,0x22,0x63,
  63              0x22,0x23,0x25,0x26,0x25,0x23,0x22,0x21,    0x72,
  64              0x52,0x23,0x45,0x43,    0x22,0x21,0xa6,0x25,0x66,
  65              0xb9,0x12,0x23,0x25,0x22,0xa5,0xab,0x22,    0x71,
  66              0x00,
  67          };
  68          unsigned char code music_tab4[]={    //北国之春
  69              0x15,0x16,0x75,    0x15,0x16,0x55,0x13,0x15,0x16,0x15,0x16,0x99,0x12,0x13,
  70              0x65,0x45,0x13,0x12,0x11,0x12,    0x73,
  71              0x62,0x42,0x12,0x11,0x96,0x15,    0x76,
  72              0x55,0x23,0x45,0xa9,0x22,    0x53,0x12,0x13,0x65,
  73              0x52,0x22,0x42,0x21,0xa6,    0xe9,0x91,0x12,0x13,0x12,0x13,0x15,0x99,0x12,
  74              //以上为过门
  75              0x20,0x23,0x23,0x23,0x63,    0x22,0x23,0x23,0x22,0x41,0xa6,0x25,
  76              0x53,0x22,0x21,0xa9,0x21,0xa6,    0x75,
  77              0x26,0xa9,0x21,0xa6,0xc9,0x12,0x11,0x96,0x15,
  78              0x23,0x25,0x25,0x26,0x45,0x21,0x22,
  79              0x13,0x35,0x25,0xa9,0xa6,0x25,0x23,0x22,    0x71,
  80              0x52,0x25,0x45,0x13,0x15,0x13,0x12,    0x21,0x41,0x22,0x43,0x45,
  81              0x23,0x25,0x26,0xa9,0x42,0x12,0x33,    0x72,
  82              0x51,0x22,0x43,0x22,0x21,    0xc6,0xc9,0x29,0xc6,0x45,0x23,0x23,
  83              0x53,0x25,0x26,0x25,0x13,0x12,0x21,    0x62,0x42,0x23,0x25,
  84              0x55,0x26,0x25,0x23,0x45,    0x26,0xa9,0x21,0x22,0x63,
  85              0x52,0x22,0x22,0x13,0x12,0x21,0xa6,0xf9,
  86              0x00,
  87          };
  88          
  89          unsigned char code music_l_tab[8]={0,1,2,3,4,6,8,16};//节拍延时单位
  90          unsigned char code music_freq_tab[64]={             //音符定时器值表
  91              0xff,0xea,                                      //0 休止符
  92              255-FREQ/24/131/256,     //256-FREQ/24/x/256    //1 do 高字节
  93              256-FREQ/24/131%256,     //256-FREQ/24/x%256    //1 do 低字节
  94              255-FREQ/24/147/256,256-FREQ/24/147%256,        //2 re
  95              255-FREQ/24/165/256,256-FREQ/24/165%256,        //3 mi
  96              255-FREQ/24/175/256,256-FREQ/24/175%256,        //4 fa
  97              255-FREQ/24/196/256,256-FREQ/24/196%256,        //5 suo
  98              255-FREQ/24/221/256,256-FREQ/24/221%256,        //6 la
  99              255-FREQ/24/248/256,256-FREQ/24/248%256,        //7 xi
 100          
 101              0xff,0xea,                                      //0 休止符
 102              255-FREQ/24/262/256,256-FREQ/24/262%256,        //1 do
 103              255-FREQ/24/294/256,256-FREQ/24/294%256,        //2 re
 104              255-FREQ/24/330/256,256-FREQ/24/330%256,        //3 mi
 105              255-FREQ/24/350/256,256-FREQ/24/350%256,        //4 fa
 106              255-FREQ/24/393/256,256-FREQ/24/393%256,        //5 suo
 107              255-FREQ/24/441/256,256-FREQ/24/441%256,        //6 la
 108              255-FREQ/24/495/256,256-FREQ/24/495%256,        //7 xi
 109          
 110              0xff,0xea,                                      //0 休止符
 111              255-FREQ/24/525/256,256-FREQ/24/525%256,        //1 do
 112              255-FREQ/24/589/256,256-FREQ/24/589%256,        //2 re
 113              255-FREQ/24/661/256,256-FREQ/24/661%256,        //3 mi
 114              255-FREQ/24/700/256,256-FREQ/24/700%256,        //4 fa
 115              255-FREQ/24/786/256,256-FREQ/24/786%256,        //5 suo
 116              255-FREQ/24/882/256,256-FREQ/24/882%256,        //6 la
 117              255-FREQ/24/990/256,256-FREQ/24/990%256,        //7 xi
C51 COMPILER V6.23a  3                                                                     09/29/2015 00:28:02 PAGE 3   

 118          
 119              0xff,0xea,                                      //0 休止符
 120              255-FREQ/24/1049/256,256-FREQ/24/1049%256,      //1 do
 121              255-FREQ/24/1178/256,256-FREQ/24/1178%256,      //2 re
 122              255-FREQ/24/1322/256,256-FREQ/24/1322%256,      //3 mi
 123              255-FREQ/24/1400/256,256-FREQ/24/1400%256,      //4 fa
 124              255-FREQ/24/1572/256,256-FREQ/24/1572%256,      //5 suo
 125              255-FREQ/24/1665/256,256-FREQ/24/1665%256,      //6 la
 126              255-FREQ/24/1869/256,256-FREQ/24/1869%256,      //7 xi
 127          
 128          };
 129          
 130          unsigned char code music_frequp_tab[64]={           //升半音
 131              0xff,0xea,                                      //0 休止符
 132              255-FREQ/24/139/256,        //1 do 高字节 //255-FREQ/24/x/256
 133              256-FREQ/24/139%256,        //1 do 低字节 //256-FREQ/24/x%256
 134              255-FREQ/24/156/256,256-FREQ/24/156%256,        //2 re
 135              255-FREQ/24/175/256,256-FREQ/24/175%256,        //3 mi
 136              255-FREQ/24/185/256,256-FREQ/24/185%256,        //4 fa
 137              255-FREQ/24/208/256,256-FREQ/24/208%256,        //5 suo
 138              255-FREQ/24/234/256,256-FREQ/24/234%256,        //6 la
 139              255-FREQ/24/262/256,256-FREQ/24/262%256,        //7 xi
 140          
 141              0xff,0xea,                                      //0 休止符
 142              255-FREQ/24/278/256,256-FREQ/24/278%256,        //1 do
 143              255-FREQ/24/312/256,256-FREQ/24/312%256,        //2 re
 144              255-FREQ/24/350/256,256-FREQ/24/350%256,        //3 mi
 145              255-FREQ/24/371/256,256-FREQ/24/371%256,        //4 fa
 146              255-FREQ/24/416/256,256-FREQ/24/416%256,        //5 suo
 147              255-FREQ/24/467/256,256-FREQ/24/467%256,        //6 la
 148              255-FREQ/24/525/256,256-FREQ/24/525%256,        //7 xi
 149          
 150              0xff,0xea,                                      //0 休止符
 151              255-FREQ/24/556/256,256-FREQ/24/556%256,        //1 do
 152              255-FREQ/24/624/256,256-FREQ/24/624%256,        //2 re
 153              255-FREQ/24/700/256,256-FREQ/24/700%256,        //3 mi
 154              255-FREQ/24/742/256,256-FREQ/24/742%256,        //4 fa
 155              255-FREQ/24/833/256,256-FREQ/24/833%256,        //5 suo
 156              255-FREQ/24/935/256,256-FREQ/24/935%256,        //6 la
 157              255-FREQ/24/1049/256,256-FREQ/24/1049%256,      //7 xi
 158          
 159              0xff,0xea,                                      //0 休止符
 160              255-FREQ/24/1112/256,256-FREQ/24/1112%256,      //1 do
 161              255-FREQ/24/1248/256,256-FREQ/24/1248%256,      //2 re
 162              255-FREQ/24/1400/256,256-FREQ/24/1400%256,      //3 mi
 163              255-FREQ/24/1484/256,256-FREQ/24/1484%256,      //4 fa
 164              255-FREQ/24/1618/256,256-FREQ/24/1618%256,      //5 suo
 165              255-FREQ/24/1764/256,256-FREQ/24/1764%256,      //6 la
 166              255-FREQ/24/1968/256,256-FREQ/24/1968%256,      //7 xi
 167          };
 168          unsigned char temp_TH1;
 169          unsigned char temp_TL1;
 170          
 171              //  音乐_编码2 -- IO定义  //
 172          sbit PIN_MSC=P1^5;                   //  音乐输出端口  //
 173          
 174              //  音乐_编码2 -- 函数原型//
 175          void music_delay(unsigned char x);   //音乐节拍延时
 176          void music_play(unsigned char *msc); //播放音乐子程序
 177          
 178              //  音乐_编码2 -- 函数    //
 179          //---------------------------------------------------------------------------//
C51 COMPILER V6.23a  3                                                                     09/29/2015 00:28:02 PAGE 4   

 180          void music_int_t1 (void) interrupt 3 using 1    //定时中断1//
 181              {
 182   1          PIN_MSC=~PIN_MSC;
 183   1          TH1=temp_TH1;
 184   1          TL1=temp_TL1;
 185   1      }
 186          
 187          //---------------------------------------------------------------------------//
 188          void music_delay(unsigned char n)     //延时 125*n 毫秒
 189              {
 190   1          unsigned char i=125,j;
 191   1          do {
 192   2              do {
 193   3                  for (j=0; j<230; j++) _nop_(); //j=(11159KHz/12-10)/4
 194   3              }while(--i);
 195   2          }while(--n);
 196   1      }
 197          
 198          //---------------------------------------------------------------------------//
 199          void music_play(unsigned char *msc)   //音乐
 200              {
 201   1          unsigned char music_freq=32;      //音高
 202   1          unsigned char music_long;         //节拍
 203   1          unsigned char music_data=0;       //音符数据
 204   1          bit music_up=0;                   //升半音
 205   1          bit music_break=0;                //断奏
 206   1          temp_TH1=0xff;
 207   1          temp_TL1=0xea;                    //关输出(输出超声波)
 208   1          TMOD=0x11;                        //T0：16位定时器、T1：16位定时器
 209   1      //    ET0=0;                          //关T0定时器中断
 210   1          ET1=1;                            //开T1定时器中断
 211   1      //---------------------------------------------------------
 212   1          while (*msc != 0x00)
 213   1              {
 214   2              music_data=*msc & 0x07;
 215   2              music_long=*msc>>4;
 216   2              //---------------------------------------------------------
 217   2              if (music_long != 0)          //是音符
 218   2                  {
 219   3                  if (*msc >=128)           //需升降调
 220   3                      {
 221   4                      if (((*msc) & 0x08) == 0)
 222   4                          {if (music_freq >= 16) music_freq -= 16;}    //音高下降
 223   4                      else
 224   4                          {if (music_freq <  48) music_freq += 16;}    //音高上升
 225   4                   }
 226   3                  //---------------------------------------------------------
 227   3                  if (music_up==1)          //升半音
 228   3                      {
 229   4                      temp_TH1=music_frequp_tab[(music_freq  + (music_data <<1))];
 230   4                      temp_TL1=music_frequp_tab[(music_freq + (music_data <<1)+1)];
 231   4                  }
 232   3                  else                      //不升半音
 233   3                      {
 234   4                      temp_TH1=music_freq_tab[(music_freq + (music_data <<1))];
 235   4                      temp_TL1=music_freq_tab[(music_freq + (music_data <<1)+ 1)];
 236   4                  }
 237   3                  //---------------------------------------------------------
 238   3                  if (music_break)          //断奏
 239   3                      {
 240   4                      music_delay(music_l_tab[music_long&0x07]-1);
 241   4                      temp_TH1=0xff;
C51 COMPILER V6.23a  3                                                                     09/29/2015 00:28:02 PAGE 5   

 242   4                      temp_TL1=0xea;
 243   4                      music_delay(1);
 244   4                  }
 245   3                  else                      //连奏
 246   3                      music_delay(music_l_tab[music_long&0x07]);
 247   3              }
 248   2              //---------------------------------------------------------
 249   2              else                          //是功能码
 250   2                  {
 251   3                  switch(music_data)
 252   3                      {
 253   4                      case 0x04:
 254   4                          music_up=0;       //不升半音
 255   4                          break;
 256   4                      case 0x05:
 257   4                          music_up=1;       //升半音
 258   4                          break;
 259   4                      case 0x06:
 260   4                          music_break=0;    //断奏
 261   4                          break;
 262   4                      case 0x07:
 263   4                          music_break=1;    //连奏
 264   4                          break;
 265   4                      default:
 266   4                          break;
 267   4                  }
 268   3              }
 269   2              //---------------------------------------------------------
 270   2              msc++;
 271   2          }
 272   1          ET1=0;                           //播放结束,关T1中断
 273   1          PIN_MSC=1;                       //关输出
 274   1      //    temp_TH1=0xff;
 275   1      //    temp_TL1=0xea;                 //关输出(输出超声波)
 276   1      //    ET0=1;                         //开T0定时器中断
 277   1      //    TMOD=0x51;                     //T0：16位定时器、T1：16位计数器
 278   1      }
 279          
 280          //---------------------------------------------------------------------------//
 281          void main(void)                      //示例
 282          {
 283   1          //    设置定时器--------------------------------------
 284   1              TMOD   =  0x11;         // TMOD: 定时器1:模式1:16位;定时器2:模式1:16位   //
 285   1      //        TCON   =  0x50;       // TCON: 定时器 1运行;      定时器 2运行         //
 286   1          //    设置并开启中断:
 287   1              IP  = 0x08;             //中断优先寄存器IP:|D7_x |x|x|PS|PT1|PX1|PT0|D0_PX0|//
 288   1              IE  = 0x88;             //中断允许寄存器IE:|D7_EA|x|ET2|ES|ET1|EX1|ET0|D0_EX0|//
 289   1         for (;;) {
 290   2            //在此调用键盘和显示函数//
 291   2            music_play(music_tab1);
 292   2            music_play(music_tab2);
 293   2            music_play(music_tab3);
 294   2            music_play(music_tab4);
 295   2         }
 296   1      }
 297          //---------------------------------------------------------------------------//
 298          
C51 COMPILER V6.23a  3                                                                     09/29/2015 00:28:02 PAGE 6   

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


P1 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0090H  1
P3 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B0H  1
T0 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B4H  1
AC . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D6H  1
T1 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B5H  1
T2 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0090H  1
EA . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AFH  1
music_l_tab. . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0159H  8
IE . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A8H  1
EXF2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CEH  1
RD . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B7H  1
ES . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ACH  1
IP . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B8H  1
RI . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0098H  1
INT0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B2H  1
CY . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D7H  1
_music_play. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  msc. . . . . . . . . . . . . . . . .  * REG *  DATA   PTR      0001H  3
  music_freq . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0004H  1
  music_long . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  music_data . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0001H  1
  music_up . . . . . . . . . . . . . .  AUTO     DATA   BIT      0000H  1
  music_break. . . . . . . . . . . . .  AUTO     DATA   BIT      0001H  1
TI . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0099H  1
INT1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B3H  1
PS . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BCH  1
T2EX . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0091H  1
OV . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D2H  1
main . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
C_T2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C9H  1
WR . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B6H  1
PIN_MSC. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0095H  1
RCLK . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CDH  1
TCLK . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CCH  1
SCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0098H  1
music_frequp_tab . . . . . . . . . . .  PUBLIC   CODE   ARRAY    01A1H  64
TMOD . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0089H  1
TCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0088H  1
IE0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0089H  1
IE1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008BH  1
CP_RL2 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C8H  1
ET0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A9H  1
ET1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ABH  1
TF0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008DH  1
ET2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ADH  1
TF1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008FH  1
TF2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CFH  1
RB8. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009AH  1
EX0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A8H  1
IT0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0088H  1
TH1. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008DH  1
music_freq_tab . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0161H  64
TB8. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009BH  1
EX1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AAH  1
IT1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008AH  1
P. . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D0H  1
SM0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009FH  1
C51 COMPILER V6.23a  3                                                                     09/29/2015 00:28:02 PAGE 7   

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


SM1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009EH  1
TL1. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008BH  1
SM2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009DH  1
PT0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B9H  1
PT1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BBH  1
RS0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D3H  1
PT2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BDH  1
TR0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008CH  1
RS1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D4H  1
music_int_t1 . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
TR1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008EH  1
TR2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CAH  1
PX0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B8H  1
PX1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BAH  1
EXEN2. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CBH  1
REN. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009CH  1
temp_TH1 . . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   0000H  1
T2CON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C8H  1
temp_TL1 . . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   0001H  1
music_tab1 . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0000H  70
RXD. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B0H  1
music_tab2 . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0046H  47
music_tab3 . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0075H  71
TXD. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B1H  1
music_tab4 . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    00BCH  157
F0 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D5H  1
_music_delay . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  n. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
  j. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
PSW. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D0H  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    238    ----
   CONSTANT SIZE    =    481    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
